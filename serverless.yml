# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ice-pipelines
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: go1.x

  iam:
    role:
      statements:
        - Effect: Allow
          Action: 
            - secretsmanager:GetSecretValue
          Resource: arn:aws:secretsmanager:us-east-1:271463937680:secret:farm/mysql-Rpzei2

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  hello:
    handler: bin/hello
    events:
      - httpApi:
          path: /hello
          method: get
  world:
    handler: bin/world
    events:
      - httpApi:
          path: /world
          method: get
  processGame:
    handler: bin/process-game
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - IceGameQueue
              - Arn
          batchSize: 1
    timeout: 500
    reservedConcurrency: 60
     
  # processDayGames:
  #   handler: bin/schedule-games
  #   events:
  #     - schedule: cron(0 12 * * ? *)

resources:
  Resources:
    IceGameQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "ice-game-queue"
        VisibilityTimeout: 60
